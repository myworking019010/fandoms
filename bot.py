import config
import messages

from datetime import datetime
import time

import telebot
from telebot import TeleBot, types, State

from pymongo import MongoClient
from bson.objectid import ObjectId  
############################################
####### –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è exception #######
import sys
import logging
import linecache
############################################

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN_BOT)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MongoDB
mongo_client = MongoClient(config.DB_URL)
db = mongo_client['everlastfandom']
users_collection = db["users"]
questionnaires_collection = db["questionnaires"]
fandoms_collection = db["fandoms"]
subscriptions_collection = db["subscriptions"]
achievements_collection = db["achievements"]


# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ choose_mode
markup_start = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=False)
markup_start.row('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
markup_start.row('üîÆ –°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ñ–∞–Ω–¥–æ–º–æ–≤')


#–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - /start, –ø—Ä–∏ –µ–µ –Ω–∞–∂–∞—Ç–∏–∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç - —Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –∏ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å –∫–æ—Ä–æ—Ç–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–Ω–¥–æ–º–æ–≤. –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –¥—Ä—É–≥–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
@bot.message_handler(commands=['start'])
def start_handler(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = users_collection.find_one({"telegram_id": message.chat.id})
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! *–∫–∞—Ä—Ç–∏–Ω–∫–∞*', reply_markup = markup_start)
        if user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î, –≤—ã–≤–æ–¥–∏–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(message.chat.id, messages.ALREADY_REGISTERED_MESSAGE, reply_markup = markup_start)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–µ–º –≤ –ë–î –∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            new_user = {
                "telegram_id": message.chat.id,
                "username": message.chat.username,
                "first_name": message.chat.first_name,
                "last_name": message.chat.last_name,
                "registration_date": datetime.now()
            }
            users_collection.insert_one(new_user)
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
            markup = types.InlineKeyboardMarkup()
            button = types.InlineKeyboardButton(text="‚û°Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_questionnaire")
            markup.add(button)
            bot.send_message(message.chat.id, messages.NEW_USER_MESSAGE, reply_markup=markup)
    except:
        PrintException()
        bot.send_message(m.chat.id, '–ö–∞–∫–∏–µ-—Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')






# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ c–ø–∏—Å–∫–µ —Ç–∏–ø–æ–≤ —Ñ–∞–Ω–¥–æ–º–æ–≤
@bot.message_handler(regexp='üîÆ –°–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö —Ñ–∞–Ω–¥–æ–º–æ–≤')
def show_our_fandoms_type_list(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    
    reply_markup = types.InlineKeyboardMarkup()
    callback_button_1 = types.InlineKeyboardButton(text="–§–∏–ª—å–º—ã", callback_data="sofl_movies")
    callback_button_2 = types.InlineKeyboardButton(text="–ê–Ω–∏–º–µ", callback_data="sofl_anime")
    callback_button_3 = types.InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="sofl_games")
    reply_markup.add(callback_button_1)
    reply_markup.add(callback_button_2)
    reply_markup.add(callback_button_3)
    
    
    bot.send_message(message.chat.id, f'‚ùï –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–Ω–¥–æ–º–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup = reply_markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ sofl_
@bot.callback_query_handler(func=lambda call: call.data.startswith('sofl_'))
def show_our_fandoms_list_callback(call):
    fandom_type = call.data.replace('sofl_', '')
    
    fandoms = fandoms_collection.find({"fandom_type": fandom_type})
    
    reply_markup = types.InlineKeyboardMarkup()
    for fandom in fandoms:
        button = types.InlineKeyboardButton(text=fandom["fandom_name"], callback_data=f'current_sofl_{fandom["_id"]}')
        reply_markup.add(button)
    button = types.InlineKeyboardButton(text=f'‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data=f'back_to_menu')
    reply_markup.add(button)
    
    bot.send_message(call.message.chat.id, f'–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–Ω–¥–æ–º–æ–≤ –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ:', reply_markup = reply_markup)



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ current_sofl_
@bot.callback_query_handler(func=lambda call: call.data.startswith('current_sofl_'))
def show_our_current_fandoms_callback(call):
    fandom_id = call.data.replace('current_sofl_', '')
    
    fandom = fandoms_collection.find_one({"_id": ObjectId(fandom_id)})
    
    reply_markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text=f'–í—Å—Ç—É–ø–∏—Ç—å –≤ —Ñ–∞–Ω–¥–æ–º!', callback_data=f'choose_current_sofl_{fandom_id}')
    reply_markup.add(button)
        
    bot.send_message(call.message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–Ω–¥–æ–º–∞: {fandom["fandom_name"]}\n–û–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–Ω–¥–æ–º–∞: {fandom["fandom_description"]}', reply_markup = reply_markup)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ choose_current_sofl_
@bot.callback_query_handler(func=lambda call: call.data.startswith('choose_current_sofl_'))
def show_our_current_fandoms_callback(call):
    fandom_id = call.data.replace('choose_current_sofl_', '')
    
    fandom = fandoms_collection.find_one({"_id": ObjectId(fandom_id)})
    
    # –∑–¥–µ—Å—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–Ω–¥–æ–º–∞
    
    check_subscriptions = subscriptions_collection.find_one({'user_id': call.message.chat.id})
    if check_subscriptions:
        subscriptions_collection.update_one({'user_id': call.message.chat.id}, {"$set": {"active_fandoms_id": {fandom_id: 'active'}}})
    else: 
        subscriptions_collection.insert_one({"user_id": call.message.chat.id, f"active_fandoms_id": {fandom_id: fandom_id}})
    
    bot.send_message(call.message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ, –ø—Ä–æ–≤–µ—Ä–∏–ª —Ç–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏, —Ç—ã –ø—Ä–∏–Ω—è—Ç –≤ —Ñ–∞–Ω–¥–æ–º! –í–æ—Ç –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏: *–±–ª–∞-–±–ª–∞-–±–ª–∞*')





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ
@bot.message_handler(regexp='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
def show_profile(message):
    user = users_collection.find_one({"telegram_id": message.from_user.id})
    if not user:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    registration_date = user['registration_date'].strftime('%d.%m.%Y')

    first_fandom = user['first_fandom']
    first_name = user['first_name']
    profile_text = f"üë§ {first_name}\nüÜî {message.from_user.id}\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {registration_date}\n1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–Ω–¥–æ–º: {first_fandom}"
    
    keyboard = types.InlineKeyboardMarkup()
    callback_button_1 = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="show_questionnaire")
    callback_button_2 = types.InlineKeyboardButton(text="–ú–æ–∏ —Ñ–∞–Ω–¥–æ–º—ã", callback_data="show_my_fandoms")
    keyboard.add(callback_button_1)
    keyboard.add(callback_button_2)
    
    bot.send_message(message.chat.id, profile_text, reply_markup=keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É
@bot.callback_query_handler(func=lambda call: call.data == 'show_questionnaire')
def show_questionnaire_callback(call):
    user_id = call.from_user.id
    questionnaire = questionnaires_collection.find_one({"user_id": user_id})
    if not questionnaire:
        bot.send_message(call.message.chat.id, "–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É.")
        return
    
    age = questionnaire['age']
    gender = questionnaire['gender']
    fandom_type = questionnaire['fandom_type']
    status = questionnaire['status']
    fandom_names = ', '.join(questionnaire.get('fandom_names', []))
    
    questionnaire_text = f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {age}\nüöπ –ü–æ–ª: {gender}\nüé≠ –¢–∏–ø —Ñ–∞–Ω–¥–æ–º–∞: {fandom_type}\nüìù –°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã: {status}"
    if fandom_names:
        questionnaire_text += f"\n–õ—é–±–∏–º—ã–µ —Ñ–∞–Ω–¥–æ–º—ã: {fandom_names}"
    
    bot.send_message(call.message.chat.id, questionnaire_text)



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ú–æ–∏ —Ñ–∞–Ω–¥–æ–º—ã
@bot.callback_query_handler(func=lambda call: call.data == 'show_my_fandoms')
def show_my_fandoms_callback(call):
    current_user_subscriptions = subscriptions_collection.find_one({'user_id': call.message.chat.id})
    
    message_to_send = '–°–µ–π—á–∞—Å —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–∞–Ω–¥–æ–º–∞—Ö:\n'
    number = 1
    for fandom in current_user_subscriptions["active_fandoms_id"]:
        #print(fandom)
        current_fandom = fandoms_collection.find_one({'_id': ObjectId(fandom)})
        message_to_send += f'#{number} - {current_fandom["fandom_name"]}\n'
    
    bot.send_message(call.message.chat.id, message_to_send)
    pass


    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@bot.callback_query_handler(func=lambda call: call.data == "fill_questionnaire")
def fill_questionnaire_handler(call):
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å, —á—Ç–æ –æ–Ω –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∫–µ—Ç—É
    user_id = call.message.chat.id
    questionnaires_collection.insert_one({"user_id": user_id, "status": "in_progress"})
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    bot.send_message(user_id, "–ö–∞–∫–æ–π —Ç–∏–ø —Ñ–∞–Ω–¥–æ–º–æ–≤ –≤–∞–º –±–æ–ª–µ–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏—Ç—Å—è?", reply_markup=create_fandom_type_keyboard())


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∞–Ω–¥–æ–º–∞
def create_fandom_type_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    button_movies = types.InlineKeyboardButton(text="–§–∏–ª—å–º—ã", callback_data="movies")
    button_anime = types.InlineKeyboardButton(text="–ê–Ω–∏–º–µ", callback_data="anime")
    button_games = types.InlineKeyboardButton(text="–ò–≥—Ä—ã", callback_data="games")
    keyboard.row(button_movies, button_anime, button_games)
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∞–Ω–¥–æ–º–∞
@bot.callback_query_handler(func=lambda call: call.data in ["movies", "anime", "games"])
def fandom_type_handler(call):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –≤ –ë–î
    questionnaires_collection.update_one({"user_id": call.message.chat.id}, {"$set": {"fandom_type": call.data}})
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –≤ –ë–î, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∂–µ—Ç—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞
    questionnaires_collection.update_one({"user_id": call.message.chat.id, "status": "in_progress"}, {"$set": {"age": "None"}})
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    skip_button = types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
    markup.add(skip_button)
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup = markup)
    bot.register_next_step_handler(message, age_received_handler)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def age_received_handler(message):
    try:
        user_id = message.chat.id
        if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å":
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –≤–æ–ø—Ä–æ—Å, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ë–î –∫–∞–∫ None –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            questionnaires_collection.update_one({"user_id": user_id, "status": "in_progress"}, {"$set": {"age": None}})
            next_question(user_id)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ë–î –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            if message.text.isdecimal():
                if int(message.text) > 0:
                    age = int(message.text)
                    questionnaires_collection.update_one({"user_id": user_id, "status": "in_progress"}, {"$set": {"age": age}})
                    next_question_woman_or_man(user_id)
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
                    markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                    skip_button = types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                    markup.add(skip_button)
                    msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=markup)
                    bot.register_next_step_handler(message, age_received_handler)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
                markup = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
                skip_button = types.KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
                markup.add(skip_button)
                msg = bot.send_message(user_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.", reply_markup=markup)
                bot.register_next_step_handler(message, age_received_handler)
    except Exception as e:
        print(e)
        bot.send_message(user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")


def next_question_woman_or_man(user_id):
    question = "–ö–∞–∫–æ–≥–æ –≤—ã –ø–æ–ª–∞?"
    
    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π", callback_data="questionnaire_choose_gender_man")
    button2 = types.InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π", callback_data="questionnaire_choose_gender_woman")
    button3 = types.InlineKeyboardButton(text="–ù–µ —Ö–æ—á—É –æ—Ç–≤–µ—á–∞—Ç—å", callback_data="questionnaire_choose_gender_no_answer")
    markup.add(button1)
    markup.add(button2)
    markup.add(button3)
    
    bot.send_message(chat_id=user_id, text=question, reply_markup = markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('questionnaire_choose_gender_'))
def choose_gender_callback(call):
    gender = None
    if call.data == "questionnaire_choose_gender_man":
        gender = "–º—É–∂—É—Å–∫–æ–π"
    elif call.data == "questionnaire_choose_gender_woman":
        gender = "–∂–µ–Ω—Å–∫–∏–π"
    elif call.data == "questionnaire_choose_gender_no_answer":
        gender = "–±–µ–∑ –æ—Ç–≤–µ—Ç–∞"

    if gender:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        questionnaires_collection.update_one({"user_id": call.message.chat.id, "status": "in_progress"}, {"$set": {"gender": gender}})
        
        fandom_type = questionnaires_collection.find_one({"user_id": call.message.chat.id})
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–Ω–¥–æ–º, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—ã –≤—Å—Ç—É–ø–∏–ª–∏ –ø–µ—Ä–≤—ã–º:', reply_markup=create_fandoms_keyboard(fandom_type["fandom_type"]))
        bot.answer_callback_query(callback_query_id=call.id, text="–û—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω")
    else:
        bot.answer_callback_query(callback_query_id=call.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")



#–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–Ω–¥–æ–º–∞
def create_fandoms_keyboard(fandom_type):
    fandoms = fandoms_collection.find({"fandom_type": fandom_type})
    keyboard = types.InlineKeyboardMarkup()
    for fandom in fandoms:
        button = types.InlineKeyboardButton(text=fandom["fandom_name"], callback_data=f'questionnaire_choose_fandom_{fandom["_id"]}')
        keyboard.add(button)
    return keyboard


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–Ω–¥–æ–º–∞
@bot.callback_query_handler(func=lambda call: str(call.data).startswith('questionnaire_choose_fandom_'))
def fandom_handler(call):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–Ω–¥–æ–º –∏–∑ call.data
    fandom_id = ObjectId(str(call.data.replace('questionnaire_choose_fandom_', '')))
    fandom = fandoms_collection.find_one({"_id": fandom_id})
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–Ω–¥–æ–º
    users_collection.update_one({"_id": ObjectId(user['_id'])}, {"$set": {"first_fandom": fandom['fandom_name']}})
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –≤ –ë–î
    questionnaires_collection.update_one({"user_id": call.message.chat.id}, {"$set": {"first_fandom": fandom['fandom_name']}})
    questionnaires_collection.update_one({"user_id": call.message.chat.id}, {"$set": {"status": "completed"}})
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–æ–º–∞"
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton(text="‚úâÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–æ–º–∞", callback_data=f"subscribe_{fandom_id}")
    markup.add(button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    bot.send_message(call.message.chat.id, messages.QUESTIONNAIRE_COMPLETED_MESSAGE, reply_markup=markup)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–æ–º–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_"))
def subscribe_handler(call):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = users_collection.find_one({"telegram_id": call.message.chat.id})
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–Ω–¥–æ–º
    fandom_id = call.data.replace('subscribe_', '')
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –ë–î
    subscriptions_collection.insert_one({"user_id": user['telegram_id'], f"fandom_id_{fandom_id}": 'ok'})
    bot.send_message(call.message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–æ–º–∞!')





















# settings 
@bot.message_handler(commands=['settings'])
def settings_handler(message):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /settings
    pass
    
    
# help 
@bot.message_handler(commands=['help'])
def help_handler(message):
    bot.send_message(message.chat.id, messages.HELP_MESSAGE)
    pass



######################## –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ Exception #############################
def PrintException():
    exc_type, exc_obj, tb = sys.exc_info()
    f = tb.tb_frame
    lineno = tb.tb_lineno
    filename = f.f_code.co_filename
    linecache.checkcache(filename)
    line = linecache.getline(filename, lineno, f.f_globals)
    bot.send_message(admin, 'LINE {} "{}")\n\n–¢–∏–ø –æ—à–∏–±–∫–∏: {}\n\n–û—à–∏–±–∫–∞: {}'.format(lineno, line.strip(), exc_type, exc_obj))


#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
